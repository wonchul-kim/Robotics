
clear all
clearvars -global

global N

t = Initialize();

%%
% R1 = ConstructRotor([0 0 0 0 0 0 0 0 0 0 0 0]',...
% 	[5*cos(0.35*t);...
% 	5*sin(0.4*t);...
% 	5*ones(size(t));...
% 	(0.1*t + pi).*ones(size(t));...
% 	]);
% 
% R2 = ConstructRotor([10 0 0 0 0 0 0 0 0 0 0 0]',...	
% 	[5*cos(-0.25*t);...
% 	5*sin(-0.2*t);...
% 	5*ones(size(t));...
% 	(0.1*t + pi).*ones(size(t));...
% 	]);

R1 = ConstructRotor([0 0 0 0 0 0 0 0 0 0 0 0]',...
	[0*ones(size(t));...
	0*ones(size(t));...
	10*ones(size(t));...
	0*ones(size(t));...
	]);

R2 = ConstructRotor([0 0 10 0 0 0 0 0 0 0 0 0]',...	
	[0*ones(size(t));...
	0*ones(size(t));...
	0*ones(size(t));...
	0*ones(size(t));...
	]);

R3 = ConstructRotor([5 0 5 0 0 0 0 0 0 0 0 0]',...	
	[-5*ones(size(t));...
	0*ones(size(t));...
	5*ones(size(t));...
	0*ones(size(t));...
	]);

R4 = ConstructRotor([-5 0 5 0 0 0 0 0 0 0 0 0]',...	
	[5*ones(size(t));...
	0*ones(size(t));...
	5*ones(size(t));...
	0*ones(size(t));...
	]);

list = 1:N;
S = sprintf('[R1.Z(1:3) ');
for n = 2:N
	S = [S sprintf('R%d.Z(1:3) ', n)];
end
S = [S ']'];

for i = 1:length(t)
	
	%%
	for n = 1:N
		eval(sprintf('R%d.ref = R%d.X_ref(:,i);', n, n));
	end
	
	%%
	D = eval(S);
	for n = 1:N
		valid_list = list(list~=n);
		eval(sprintf('R%d = controller_sliding(R%d, D(:, valid_list));', n, n));
	end

	%%
	for n = 1:N
		eval(sprintf('R%d = dynamics(R%d);', n, n));
	end
	
	%%
	for n = 1:N
		eval(sprintf('R%d.Z_ref(:,i)	= R%d.ref;', n, n));
		eval(sprintf('R%d.output(:,i+1)	= R%d.Z;', n, n));
		eval(sprintf('R%d.F_rep(:,i)	= R%d.repulsive;', n, n));
	end
	
end

for n = 1:N
	eval(sprintf('quad_plot(t, R%d);', n));
end